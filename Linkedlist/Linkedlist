//===================== Delete a Node

import java.util.*;
import java.lang.*;
import java.io.*;

public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
           Scanner scn=new Scanner(System.in);
          int n=scn.nextInt();
          Node head=null;
          Node ptr=head;
       for(int i=0;i<n;i++){
            int val=scn.nextInt();
            Node temp=new Node(val);
            if(head==null){
              head=temp;
              ptr=head;
              continue;
            }
           ptr.next=temp;
         ptr=ptr.next;
       }
      int k=scn.nextInt();
      head=deleteNode(head,k);
      print(head);

    }
  public static void print(Node head){
    Node ptr=head;
    while(ptr!=null){
        System.out.print(ptr.val+ " ");
      ptr=ptr.next;
    }
  }
    public static Node deleteNode(Node head,int k){
      if(k==0){
        return head.next;
      }
        Node temp=head;
       for(int i=0;i<k-1;i++){
            temp=temp.next;
       }
      Node t=temp.next;
      temp.next=temp.next.next;
      t.next=null;
      return head;
    }
}

class Node{
     int val;
     Node next;
     Node(int val){
       this.val=val;
       next=null;
     }
}


//===================Add 1 to a number represented as linked list=================

import java.util.*;
import java.lang.*;
import java.io.*;

public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner scn=new Scanner(System.in);
        int n=scn.nextInt();
        Node head=null;
        Node ptr=head;
        while(n>0){
          int rem=n%10;
          n=n/10;
          Node temp=new Node(rem);
          if(head==null){
            head=temp;
            ptr=head;
            continue;
          }
          ptr.next=temp;
          ptr=ptr.next;
        }
       int carry=1;
       ptr=head;
      while(ptr!=null){
        int val=ptr.val;
        val+=carry;
        int rem=val%10;
        ptr.val=rem;
        carry=val/10;
        ptr=ptr.next;
      }
      ptr=head;
      if(carry!=0){
        Node temp=new Node(carry);
        while(ptr.next!=null){
          ptr=ptr.next;
        }
        ptr.next=temp;
      }
      head=reverse(head);
      ptr=head;
      while(ptr!=null){
        System.out.print(ptr.val+" ");
        ptr=ptr.next;
      }
	}
  public static Node reverse(Node head){
    Node prev=null;
    Node curr=head;
    while(curr!=null){
      Node next=curr.next;
      curr.next=prev;
      prev=curr;
      curr=next;
    }
    return prev;
  }
}
class Node{
  int val;
  Node next;
  Node(int val){
    this.val=val;
    next=null;
  }
}


//====================remove mid node from linkedlist

import java.util.*;
import java.lang.*;
import java.io.*;

public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
        Scanner scn= new Scanner(System.in);
        int n=scn.nextInt();
      Node head=null;
      Node ptr=head;
      while(n-->0){
        Node temp=new Node(scn.nextInt());
        if(head==null){
          head=temp;
          ptr=temp;
          continue;
        }
        ptr.next=temp;
        ptr=ptr.next;
       }
      head=removeMidNode(head);
      print(head);

    }
  public static void print(Node head){
    Node ptr=head;
    while(ptr!=null){
      System.out.print(ptr.val+" ");
      ptr=ptr.next;
    }
  }
    public static Node removeMidNode(Node head){
      if(head.next==null){
        System.out.println(-1);
         return null;
      }

      Node ptr1=head;
      Node ptr2=head;
      Node prev=null;
      while(ptr2!=null&&ptr2.next!=null){
          ptr2=ptr2.next.next;
          prev=ptr1;
         ptr1=ptr1.next;

      }
      prev.next=prev.next.next;
      ptr1.next=null;
      return head;

    }
}
class Node{
  int val;
  Node next;
  Node(int val){
    this.val=val;
  }
}

//===============print in reverse================

import java.util.*;
import java.lang.*;
import java.io.*;

public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		  Scanner scn= new Scanner(System.in);
        int n=scn.nextInt();
      Node head=null;
      Node ptr=head;
      while(n-->0){
        Node temp=new Node(scn.nextInt());
        if(head==null){
          head=temp;
          ptr=temp;
          continue;
        }
        ptr.next=temp;
        ptr=ptr.next;
       }
      //expectation
      printInReverse(head);
	}
  public static void printInReverse(Node head){
    //base case
    if(head==null){
      return;
    }
     //faith
      printInReverse(head.next);
      System.out.print(head.val+" ");
  }
}
class Node{
  int val;
  Node next;
  Node(int val){
    this.val=val;
  }
}
